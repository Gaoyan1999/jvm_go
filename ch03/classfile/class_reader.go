package classfileimport "encoding/binary"type ClassReader struct {	data []byte // a.k.a unit8}// u1func (self *ClassReader) readUint8() uint8 {	val := self.data[0]	self.data = self.data[1:]	return val}// u2func (self *ClassReader) readUint16() uint16 {	val := binary.BigEndian.Uint16(self.data)	self.data = self.data[2:]	return val}// u4func (self *ClassReader) readUint32() uint32 {	val := binary.BigEndian.Uint32(self.data)	self.data = self.data[4:]	return val}// u8func (self *ClassReader) readUint64() uint64 {	val := binary.BigEndian.Uint64(self.data)	self.data = self.data[8:]	return val}// read u2 tablefunc (self *ClassReader) readUnit16s() []uint16 {	len := self.readUint16()	s:=make([]uint16,len)	for i:= range s {		s[i] = self.readUint16()	}	//TODO: compare	//for i:=0;i<int(len);i++ {	//	s= append(s,self.readUint16())	//}	return  s}func (self *ClassReader) readBytes(n uint32) []byte {	bytes := self.data[:n]	self.data = self.data[n:]	return bytes}